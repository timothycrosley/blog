<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TimothyCrosley.com - New Project</title><link href="https://timothycrosley.com/" rel="alternate"></link><link href="https://timothycrosley.com/feeds/new-project.atom.xml" rel="self"></link><id>https://timothycrosley.com/</id><updated>2019-09-03T04:00:00-07:00</updated><subtitle>My Personal Homepage and Blog</subtitle><entry><title>Introducing pdocs - Documentation Powered by Your Python Code</title><link href="https://timothycrosley.com/project-3-pdocs" rel="alternate"></link><published>2019-09-03T04:00:00-07:00</published><updated>2019-09-03T04:00:00-07:00</updated><author><name>timothycrosley</name></author><id>tag:timothycrosley.com,2019-09-03:/project-3-pdocs</id><summary type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/pdocs/"&gt;&lt;img alt="pdocs Logo" src="https://raw.githubusercontent.com/timothycrosley/pdocs/master/art/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;project:&lt;/td&gt;
&lt;td&gt;3/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;pdocs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;Modern MIT fork of pdoc. Automatic Documentation from Code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You want to use pdoc but not AGPL OR are interested in documenting Python projects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't create Python projects. Or, you've already created documentation sites for your Python projects …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/pdocs/"&gt;&lt;img alt="pdocs Logo" src="https://raw.githubusercontent.com/timothycrosley/pdocs/master/art/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;project:&lt;/td&gt;
&lt;td&gt;3/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;pdocs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;Modern MIT fork of pdoc. Automatic Documentation from Code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You want to use pdoc but not AGPL OR are interested in documenting Python projects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't create Python projects. Or, you've already created documentation sites for your Python projects and are happy with the tooling around them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prior Work:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/mitmproxy/pdoc"&gt;pdoc&lt;/a&gt;, &lt;a href="https://timothycrosley.com/project-2-portray"&gt;portray&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;Sometimes We Don't Pick our Projects&lt;/h1&gt;
&lt;p&gt;You would think one of the great things about working on Open Source projects is that you can pick to work on whatever you want.
Your projects can reflect what you are most skilled in or passionate about. However, I discovered on my last project; this is not always the case.
If you want to be a good steward of an Open Source project you manage, you also have to be ready to handle issues with dependencies.&lt;/p&gt;
&lt;p&gt;After releasing my last project, I was thrilled to see it hit the top of hackernews!
However, one thread brought up a controversy I noticed late into the project: &lt;a href="https://news.ycombinator.com/item?id=20803008"&gt;https://news.ycombinator.com/item?id=20803008&lt;/a&gt;.
But just as importantly, looking through the GitHub thread again made me aware an even bigger issue: pdoc3, unlike the original pdoc, is AGPL. All my projects, including portray, are licensed under MIT, which is not compatible with AGPL.&lt;/p&gt;
&lt;p&gt;This led me to the realization I would need to fork the original pdoc and modernize it so it could handle the requirements set by portray.&lt;/p&gt;
&lt;h1&gt;Creating pdocs&lt;/h1&gt;
&lt;p&gt;I decided to call my fork &lt;code&gt;pdocs&lt;/code&gt; as I felt it had nice symmetry with the other portray dependency &lt;code&gt;mkdocs&lt;/code&gt; while holding a dual meaning well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python Docs&lt;/li&gt;
&lt;li&gt;pdoc successor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most Open Source developers, my self included, don't look forward to forking an old project with a long history.
There's tends to be technical debt in old Open Source projects, just as there is in commercial ones. The moment you fork,
especially if your fork is successful, you own that debt. And, since you likely aren't the creator, you probably don't understand the debt you now possess.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pdoc&lt;/code&gt; was only partially an exception to this, as it turned out a ton of work had been done on the repository up until about a year ago, most of it being refactoring.
I still found a lot of dead code paths and was able to clean things up significantly, but at least the house was preparing to come to order.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pdocs&lt;/code&gt; includes the following improvements over &lt;code&gt;pdoc&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Type hint support.&lt;/li&gt;
&lt;li&gt;Simple programmatic API.&lt;/li&gt;
&lt;li&gt;A ton of bug fixes.&lt;/li&gt;
&lt;li&gt;Markdown generation support.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these were requirements for it to be able to replace &lt;code&gt;pdoc&lt;/code&gt; usage within &lt;code&gt;portray.&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Thanks For Reading&lt;/h1&gt;
&lt;p&gt;Thanks for taking the time to read about this new project!
What do you think of pdocs? Any projects you would like to see in the future? Any plans I should try out?&lt;/p&gt;
&lt;p&gt;~Timothy Crosley&lt;/p&gt;</content><category term="Projects"></category><category term="52"></category><category term="Introduction"></category></entry><entry><title>Introducing portray - Your Project with Great Documentation</title><link href="https://timothycrosley.com/project-2-portray" rel="alternate"></link><published>2019-08-26T04:00:00-07:00</published><updated>2019-08-26T04:00:00-07:00</updated><author><name>timothycrosley</name></author><id>tag:timothycrosley.com,2019-08-26:/project-2-portray</id><summary type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;&lt;img alt="potray Logo" src="https://raw.githubusercontent.com/timothycrosley/portray/master/art/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;project:&lt;/td&gt;
&lt;td&gt;2/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;portray&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;Beautiful documentation websites for Python projects without the work.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You create Python projects that could use browseable and searchable static documentation websites.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't create Python projects. Or, you've already created documentation sites for your Python projects and are …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;&lt;img alt="potray Logo" src="https://raw.githubusercontent.com/timothycrosley/portray/master/art/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;project:&lt;/td&gt;
&lt;td&gt;2/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;portray&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;Beautiful documentation websites for Python projects without the work.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You create Python projects that could use browseable and searchable static documentation websites.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't create Python projects. Or, you've already created documentation sites for your Python projects and are happy with the tooling around them.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prior Work:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.mkdocs.org/"&gt;MkDoc&lt;/a&gt;, &lt;a href="https://pdoc3.github.io/pdoc/"&gt;pdoc&lt;/a&gt;, &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;sphinx&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;A Birthday Gift to Myself&lt;/h1&gt;
&lt;p&gt;I decided to release &lt;code&gt;portray&lt;/code&gt; today because today marks my 30th birthday. And, I couldn't think of a better gift to give myself then more and better documentation.
I know I'll use &lt;code&gt;portray&lt;/code&gt; for the rest of the projects that I create, and retrofit my old ones to use it as well.
What would be even cooler is if even one developer creates a documentation website with portray when they wouldn't have created one otherwise.&lt;/p&gt;
&lt;h1&gt;What Problem Does portray Solve?&lt;/h1&gt;
&lt;p&gt;In an ideal world, every programming project should have documentation. Python projects being no exception.
But, this documentation shouldn't come at the expense of writing elegant code and APIs.
Indeed, if things are working well, the two goals should complement each other.
One thing that often happens, though, is that documentation systems become complex.
This complexity can lead to accomplishing those two goals separately. And, when done independently it can be easy for them
to feel like they compete with each other.
One common way this dynamic plays out is in stale documentation. If code and documentation live too far from each other
but at a similar level of abstraction, this drift seems to be an inevitability.&lt;/p&gt;
&lt;p&gt;This fact has lead to a sentiment that I have heard many times. And, indeed shared an appreciation for in the past. I'll summarize this sentiment as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Wrong documentation is worse than no documentation."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which, of course, could be seen as conflicting with another common sentiment. The competing view is captured well on pdoc3's homepage:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Documentation is like sex: when it is good, it is very, very good; and when it is bad, it is better than nothing."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the &lt;a href="https://github.com/hugapi/HOPE/blob/master/all/HOPE-20--The-Zen-of-Hug.md"&gt;Zen of Hug&lt;/a&gt; we summarize these seemingly competing desires as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wrong documentation is worse than no documentation.
  Everything should be documented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reality, as is often the case, is that both sentiments have merit. In the end, almost everything we do as humans that is of significant complexity has errors.
If a documentation website helps solve the problems most users have while having a few incorrect sections, it is still a net good thing.
But, if a well-documented project is wrong in particularly critical sections - it might have been better with no documentation at all. In the end, the best thing to do may be to reduce the complexity as much as possible. And hope that by doing so, we reduce the separation of the goals and the corresponding errors.&lt;/p&gt;
&lt;p&gt;One of the unfortunate things is that I believe these different viewpoints are reflected in the tools available. In general, at least in Python, we have two types of documentation systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Reference Documentation:
 These systems include &lt;code&gt;pydoc&lt;/code&gt;, &lt;code&gt;pdoc&lt;/code&gt;, &lt;code&gt;pdoc3&lt;/code&gt; and others. They take your existing code and docstrings and put it on a website.
 This can undoubtedly be useful. But, generally, this is the kind of documentation you look at as a reference once you are deep into a problem. Often, it feels it is easier to look at the code. This is especially true since these systems tend not to be searchable.&lt;/li&gt;
&lt;li&gt;Manual Documentation Systems:
 If the other systems view code as the first-class entity, these systems see documentation itself as the top priority.
 They need configuration files. They often suggest you put non-standard docstrings in your project. And, in general, they do everything they can to ensure that the outputted documentation is what is envisioned. These systems produce documentation websites that are searchable, browseable, configurable, and beautiful. Projects that support this line of thinking include: &lt;code&gt;sphinx&lt;/code&gt; and to a lesser degree &lt;code&gt;MkDocs.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, what I've always wanted was a documentation generator that put both my code and the documentation I was generating on equal footing. I've wanted a documentation generator that was easy to use, searchable, and configurable only if I needed it to be. One that auto-generated reference docs, while enabling me to make beautiful quick start guides. I hope &lt;code&gt;portray&lt;/code&gt; is that project.&lt;/p&gt;
&lt;h1&gt;What's the Proposed Solution?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://timothycrosley.github.io/portray/"&gt;portray&lt;/a&gt; is an automatic documentation website generator for Python projects. portray tries as much as possible to utilize existing work to accomplish the goals stated above. Under the hood, portray combines the Markdown documentation rendering capabilities provided by MkDocs with the automatic reference documentation generated by pdoc3.&lt;/p&gt;
&lt;p&gt;I encourage you to look through the projects self-produced &lt;a href="https://timothycrosley.github.io/portray/"&gt;documentation website&lt;/a&gt;. I believe that website is the best overview I can give of &lt;code&gt;portray&lt;/code&gt; as a documentation solution.&lt;/p&gt;
&lt;h1&gt;Things I Experimented with When Making portray&lt;/h1&gt;
&lt;p&gt;Continuing from my last project, I wanted to explore a few new tools when making portray itself:&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;I used two new tools when making the documentation for &lt;code&gt;portray&lt;/code&gt; itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://asciinema.org/"&gt;asciinema&lt;/a&gt; - Made it super easy to record CLI interaction. The only downside is the CLI sessions can't be placed directly on GitHub markdown pages. They can, however, be placed on &lt;code&gt;portray&lt;/code&gt; produced documentation websites.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phw/peek"&gt;peek&lt;/a&gt; - Made it trivially easy to record a section of my screen as a gif, which I used for the GitHub README.md file. I did, however, have to download an older version of the &lt;code&gt;.deb&lt;/code&gt; due to &lt;a href="https://github.com/phw/peek/issues/434"&gt;this issue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Local Environment Management&lt;/h2&gt;
&lt;p&gt;For the last project, I gave &lt;a href="https://docs.pipenv.org/en/latest/"&gt;PipEnv&lt;/a&gt; a run-through, for this one I used &lt;a href="https://Poetry.eustace.io/"&gt;poetry&lt;/a&gt;. From my experience, poetry wins hands down. It managed to replace flit, remove duplicate dependencies, and maintain stability across machines. All while using the standard &lt;code&gt;pyproject.toml&lt;/code&gt; configuration file. Over time I'll be switching all my
projects to poetry. Sébastien, if you happen to read this, kudos your project is fantastic. That is all.&lt;/p&gt;
&lt;h1&gt;Thanks For Reading&lt;/h1&gt;
&lt;p&gt;Thanks for taking the time to read about this new project!
What do you think of portray? Any projects you would like to see in the future? Any projects I should try out?&lt;/p&gt;
&lt;p&gt;~Timothy Crosley&lt;/p&gt;</content><category term="Projects"></category><category term="52"></category><category term="Introduction"></category></entry><entry><title>Project 1/52: preconvert - Supercharge Your Serialization!</title><link href="https://timothycrosley.com/project-1-preconvert" rel="alternate"></link><published>2019-08-18T23:00:00-07:00</published><updated>2019-08-18T23:00:00-07:00</updated><author><name>timothycrosley</name></author><id>tag:timothycrosley.com,2019-08-18:/project-1-preconvert</id><summary type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/preconvert/"&gt;&lt;img alt="preconvert Logo" src="https://raw.githubusercontent.com/timothycrosley/preconvert/master/art/logo_large.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Project:&lt;/td&gt;
&lt;td&gt;1/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/preconvert/"&gt;preconvert&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;No more &lt;code&gt;is not JSON serializable&lt;/code&gt; errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You use JSON, MessagePack, BSON, or similar. Or, you are interested in the state of developing Python projects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't use serialization, only use it with basic built-in types, or only use …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://timothycrosley.github.io/preconvert/"&gt;&lt;img alt="preconvert Logo" src="https://raw.githubusercontent.com/timothycrosley/preconvert/master/art/logo_large.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Project:&lt;/td&gt;
&lt;td&gt;1/52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title/Link:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://timothycrosley.github.io/preconvert/"&gt;preconvert&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pitch:&lt;/td&gt;
&lt;td&gt;No more &lt;code&gt;is not JSON serializable&lt;/code&gt; errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read if:&lt;/td&gt;
&lt;td&gt;You use JSON, MessagePack, BSON, or similar. Or, you are interested in the state of developing Python projects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skip if:&lt;/td&gt;
&lt;td&gt;You don't use serialization, only use it with basic built-in types, or only use it from the context of a framework that handles it well already.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prior Work:&lt;/td&gt;
&lt;td&gt;&lt;a href="https://hynek.me/articles/serialization/"&gt;https://hynek.me/articles/serialization/&lt;/a&gt;, &lt;a href="https://pypi.org/project/json-default/"&gt;json-defaults&lt;/a&gt;, and probably many more.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;What Problem Does preconvert Solve?&lt;/h1&gt;
&lt;p&gt;My first project is a small one that comes the way of a goods friends request made at OSCON.
Many of us use Python's built-in &lt;code&gt;json&lt;/code&gt; module or one of the similar serialization libraries available on PyPI.
These are trivially easy to use, and generally, work great. You pass in your native Python objects to &lt;code&gt;json.dumps&lt;/code&gt; and your done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;preconvert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They even tend to follow the same loose specification (a &lt;code&gt;dumps&lt;/code&gt; and corresponding &lt;code&gt;loads&lt;/code&gt; method) making switching between them
for any reason equally straight forward.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;simplejson&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;preconvert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is pretty awesome! It's made even more so by the years of optimization these JSON libraries have received.
Not only is outputting JSON easy, but it's also fast.&lt;/p&gt;
&lt;p&gt;Problems occur when you start going beyond the basic built-in types.
Search for &lt;code&gt;is not JSON serializable&lt;/code&gt; and countless stack-overflow questions will appear with many workarounds for the problem.
The simplest of which is to override the &lt;code&gt;default&lt;/code&gt; callback method provided by handling just the type that failed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uuid1&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fallback_conversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fallback_conversion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above works great when you have one type you need to convert, and one place where you serialize data.
It works particularly badly if you are serializing data which you don't necessarily have full control of in multiple places.
Many web frameworks, including &lt;a href="http://www.hug.rest/"&gt;hug&lt;/a&gt;, provide mechanisms to get around this. They allow you to extend JSON serialization cleanly and provide built-in default serialization for most common types.&lt;/p&gt;
&lt;p&gt;My friend, Brandon, suggested this shouldn't be hidden within the walls of a framework. Everywhere &lt;code&gt;json&lt;/code&gt;, or another serializer is used, it should be trivial
to expand with custom types and handle common ones right out of the gate. I agreed, and preconvert was born.&lt;/p&gt;
&lt;h1&gt;What's the Proposed Solution?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://timothycrosley.github.io/preconvert/"&gt;preconvert&lt;/a&gt; is a small, framework independent, extendable Python library that aims to solve the above problems by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Providing an easy way to specify custom type serializers&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;preconvert&lt;/span&gt;

&lt;span class="nd"&gt;@preconvert.always&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_UUID_to_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_instance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using this ability to automatically handle common types (UUID, dataclasses, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Adding an easy mechanism to extend this further using entrypoint powered plugins&lt;/li&gt;
&lt;li&gt;Exposing the same interface defined by existing serializers to make preconvert an easy drop-in replacement.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;preconvert.output&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;simplejson&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;preconvert currently works out-of-the-box with &lt;code&gt;bson&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;simplejson&lt;/code&gt;, and &lt;code&gt;msgpack&lt;/code&gt;.
Currently, there is one &lt;a href="https://github.com/timothycrosley/preconvert_numpy"&gt;plugin to handle numpy types&lt;/a&gt;, that can be enabled simply by adding it to the projects
package requirements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;preconvert_numpy&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information about the project, browse the &lt;a href="https://timothycrosley.github.io/preconvert/"&gt;documentation website&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;State of Python Project Creation&lt;/h1&gt;
&lt;p&gt;One of the reasons I wanted to challenge myself to create 52 projects over this next year was because I genuinely believe it shouldn't be hard to create projects.
While Python makes many things easy, it's surprising the number of things that should be considered for even a simple project.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;For this project I used both &lt;a href="https://pdoc3.github.io/pdoc/"&gt;pdoc3&lt;/a&gt; and &lt;a href="https://www.mkdocs.org/"&gt;mkdocs&lt;/a&gt; for the first time.
&lt;a href="https://pdoc3.github.io/pdoc/"&gt;pdoc3&lt;/a&gt; is probably the easiest route to document a Python project and I appreciated how it encouraged
me to write more expressive doc strings and better organize my project.
&lt;a href="https://www.mkdocs.org/"&gt;mkdocs&lt;/a&gt; on the other hand has beautiful templates, integrates very well with the existing Markdown documentation I tend to include in GitHub repos,
and has built in search capabilities. However, mkdocs noticeably lacks any auto-documentation abilities at the current time.
To get around this, I created a build step that included customized &lt;a href="https://pdoc3.github.io/pdoc/"&gt;pdoc3&lt;/a&gt; output that was compatible with what is expected by mkdocs.
I think it works fairly well, but I was disappointed with the lack of a robust all-in-one solution for simple projects.&lt;/p&gt;
&lt;h2&gt;Local Environment Management&lt;/h2&gt;
&lt;p&gt;I gave &lt;a href="https://docs.pipenv.org/en/latest/"&gt;PipEnv&lt;/a&gt; its first serious try. It worked alright, but I found it surprisingly slow.
It often was slow enough to make up for any time benefit it could have provided. I also found &lt;code&gt;pipenv run&lt;/code&gt; and &lt;code&gt;pipenv shell&lt;/code&gt; clunky to use.
Finally, I found it's lockfile to be confused when I switched machines constantly, my best guess is because of wheels for different platforms. Still, I'm glad to see project environment management become an increased area of focus.
For my next project, I intend to give &lt;a href="https://poetry.eustace.io/"&gt;poetry&lt;/a&gt; a try.&lt;/p&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;p&gt;I found &lt;a href="https://github.com/takluyver/flit"&gt;flit&lt;/a&gt; to be an absolute joy to use. For the most part, it just worked and got out of my way.
It's simplified approach is perfect for small projects. The only downside I encountered, which unfortunately for me is a major one, is the lack of &lt;a href="https://cython.org/"&gt;Cython&lt;/a&gt; support.&lt;/p&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;I'm a huge fan of static analysis, code formatters, and any tool that aims to raise the bar for code-quality on a project automatically.
This project included &lt;a href="https://github.com/hugapi/HOPE/blob/master/all/HOPE-8--Style-Guide-for-Hug-Code.md#automated-code-cleaners"&gt;all the ones I've used in the past&lt;/a&gt;, but also, &lt;a href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;. For the most part, it just worked.
As someone who is very comfortable with dynamically typed languages, I was surprised how little it impacted my productivity, and how even in this
small project it found real errors.&lt;/p&gt;
&lt;p&gt;I'm hoping to make my next projects ones that simplify these steps if only to give me more time to devote to each individual project.&lt;/p&gt;
&lt;h1&gt;Thanks For Reading&lt;/h1&gt;
&lt;p&gt;Thanks for taking the time to read about this new project!
What do you think of preconvert? Any projects you would like to see in the future? Any projects I should try out?&lt;/p&gt;
&lt;p&gt;~Timothy Crosley&lt;/p&gt;</content><category term="Projects"></category><category term="52"></category><category term="Introduction"></category></entry></feed>